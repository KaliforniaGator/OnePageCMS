<?php
/**
 * Page Builder API
 * Handles save, load, and delete operations for pages
 */

// Start session if not already started
if (session_status() === PHP_SESSION_NONE) {
    session_start();
}

// Load configuration
require_once __DIR__ . '/../../config.php';

// Suppress PHP errors from being output (they break JSON)
error_reporting(0);
ini_set('display_errors', 0);

// Set JSON header
header('Content-Type: application/json');

// Get request method
$method = $_SERVER['REQUEST_METHOD'];

// Handle GET requests (load page)
if ($method === 'GET') {
    handleLoadPage();
}

// Handle POST requests (save/delete page)
if ($method === 'POST') {
    $input = file_get_contents('php://input');
    $data = json_decode($input, true);
    
    if (!$data || !isset($data['action'])) {
        sendError('Invalid request');
    }
    
    switch ($data['action']) {
        case 'save':
            handleSavePage($data);
            break;
        case 'delete':
            handleDeletePage($data);
            break;
        default:
            sendError('Unknown action');
    }
}

/**
 * Load a page's block data
 */
function handleLoadPage() {
    if (!isset($_GET['page'])) {
        sendError('Page name not provided');
    }
    
    $pageName = sanitizePageName($_GET['page']);
    if (!$pageName) {
        sendError('Invalid page name');
    }
    
    $pageFile = PAGES_DIR . '/' . $pageName . '.php';
    
    if (!file_exists($pageFile)) {
        sendError('Page not found');
    }
    
    // Read the page file and extract block data
    $content = file_get_contents($pageFile);
    
    // Try to extract JSON data from comment at the top of the file
    // Look for PAGE_BUILDER_DATA: followed by JSON (can span multiple lines in comment)
    if (preg_match('/PAGE_BUILDER_DATA:\s*(\{.+?\})\s*\*\//s', $content, $matches)) {
        $blockData = json_decode($matches[1], true);
        if ($blockData && isset($blockData['blocks'])) {
            sendSuccess(['blocks' => $blockData['blocks']]);
        }
    }
    
    // If no data found, return empty
    sendSuccess(['blocks' => []]);
}

/**
 * Save a page with block data
 */
function handleSavePage($data) {
    if (!isset($data['pageName']) || !isset($data['blocks'])) {
        sendError('Missing required fields');
    }
    
    $pageName = sanitizePageName($data['pageName']);
    if (!$pageName) {
        sendError('Invalid page name');
    }
    
    $blocks = $data['blocks'];
    
    // Log what we're saving
    error_log('Saving page: ' . $pageName);
    error_log('Blocks data: ' . json_encode($blocks));
    
    // Generate PHP code for the page
    $phpCode = generatePagePHP($pageName, $blocks);
    
    // Log generated code
    error_log('Generated PHP length: ' . strlen($phpCode));
    
    // Save to file
    $pageFile = PAGES_DIR . '/' . $pageName . '.php';
    
    $result = file_put_contents($pageFile, $phpCode);
    if ($result === false) {
        sendError('Failed to write page file');
    }
    
    error_log('Wrote ' . $result . ' bytes to ' . $pageFile);
    
    // Return a preview of what was saved
    $preview = substr($phpCode, 0, 500);
    
    sendSuccess([
        'message' => 'Page saved successfully', 
        'file' => $pageName . '.php', 
        'bytes' => $result,
        'preview' => $preview,
        'blockCount' => count($blocks)
    ]);
}

/**
 * Delete a page
 */
function handleDeletePage($data) {
    if (!isset($data['pageName'])) {
        sendError('Page name not provided');
    }
    
    $pageName = sanitizePageName($data['pageName']);
    if (!$pageName) {
        sendError('Invalid page name');
    }
    
    $pageFile = PAGES_DIR . '/' . $pageName . '.php';
    
    if (!file_exists($pageFile)) {
        sendError('Page not found');
    }
    
    if (!unlink($pageFile)) {
        sendError('Failed to delete page file');
    }
    
    sendSuccess(['message' => 'Page deleted successfully']);
}

/**
 * Generate PHP code for a page from block data
 */
function generatePagePHP($pageName, $blocks) {
    $pageTitle = ucfirst(str_replace('-', ' ', $pageName));
    
    // Store block data as JSON in a comment for later editing
    $blockDataJson = json_encode(['blocks' => $blocks], JSON_PRETTY_PRINT);
    
    $php = "<?php\n";
    $php .= "/**\n";
    $php .= " * Page: {$pageTitle}\n";
    $php .= " * Generated by Page Builder\n";
    $php .= " * \n";
    $php .= " * PAGE_BUILDER_DATA: " . json_encode(['blocks' => $blocks]) . "\n";
    $php .= " */\n\n";
    $php .= "// Set page metadata\n";
    $php .= "set_page_meta([\n";
    $php .= "    'title' => '{$pageTitle}',\n";
    $php .= "    'description' => 'Page created with Page Builder'\n";
    $php .= "]);\n";
    $php .= "?>\n\n";
    $php .= "<article class=\"page-content\">\n";
    $php .= "    <h1>{$pageTitle}</h1>\n\n";
    
    // Generate block code
    foreach ($blocks as $block) {
        $php .= generateBlockCode($block);
    }
    
    $php .= "</article>\n";
    
    return $php;
}

/**
 * Generate PHP code for a child block (inline, no PHP tags)
 */
function generateChildBlockCode($block) {
    $type = $block['type'];
    $data = $block['data'];
    $blockContent = '';
    
    // Build inline styles from common properties
    $inlineStyles = buildInlineStyles($data);
    
    switch ($type) {
        case 'textview':
            $content = isset($data['content']) ? $data['content'] : 'Text content';
            $viewType = isset($data['type']) ? $data['type'] : 'paragraph';
            $level = isset($data['level']) ? intval($data['level']) : 2;
            
            if ($viewType === 'heading') {
                $blockContent = '<h' . $level . '>' . $content . '</h' . $level . '>';
            } elseif ($viewType === 'quote') {
                $blockContent = '<blockquote>' . $content . '</blockquote>';
            } elseif ($viewType === 'code') {
                $blockContent = '<pre><code>' . $content . '</code></pre>';
            } else {
                $blockContent = '<p>' . $content . '</p>';
            }
            break;
            
        case 'button':
            $text = isset($data['text']) ? $data['text'] : 'Click Me';
            $url = isset($data['url']) ? $data['url'] : '#';
            $btnType = isset($data['type']) ? $data['type'] : 'primary';
            $blockContent = '<a href="' . $url . '" class="btn btn-' . $btnType . '">' . $text . '</a>';
            break;
            
        case 'buttongroup':
            $buttons = isset($data['buttons']) ? $data['buttons'] : [['text' => 'Button 1', 'url' => '#', 'type' => 'primary']];
            $alignment = isset($data['alignment']) ? $data['alignment'] : 'left';
            $blockContent = '<div class="btn-group btn-group-' . $alignment . '">';
            foreach ($buttons as $btn) {
                $blockContent .= '<a href="' . $btn['url'] . '" class="btn btn-' . $btn['type'] . '">' . $btn['text'] . '</a>';
            }
            $blockContent .= '</div>';
            break;
            
        case 'card':
            $title = isset($data['title']) ? $data['title'] : 'Card Title';
            $content = isset($data['content']) ? $data['content'] : 'Card content';
            $blockContent = '<div class="card"><h3>' . $title . '</h3><p>' . $content . '</p></div>';
            break;
            
        case 'alert':
            $message = isset($data['message']) ? $data['message'] : 'Alert message';
            $alertType = isset($data['type']) ? $data['type'] : 'info';
            $title = isset($data['title']) ? $data['title'] : '';
            $blockContent = '<div class="alert alert-' . $alertType . '">';
            if ($title) {
                $blockContent .= '<strong>' . $title . '</strong> ';
            }
            $blockContent .= $message . '</div>';
            break;
            
        case 'hero':
            $title = isset($data['title']) ? $data['title'] : 'Hero Title';
            $subtitle = isset($data['subtitle']) ? $data['subtitle'] : '';
            $blockContent = '<div class="hero"><h1>' . $title . '</h1>';
            if ($subtitle) {
                $blockContent .= '<p>' . $subtitle . '</p>';
            }
            $blockContent .= '</div>';
            break;
            
        case 'list':
            $items = isset($data['items']) ? $data['items'] : "Item 1\nItem 2\nItem 3";
            $listType = isset($data['type']) ? $data['type'] : 'ul';
            $itemsArray = array_filter(explode("\n", $items));
            $blockContent = '<' . $listType . '>';
            foreach ($itemsArray as $item) {
                $blockContent .= '<li>' . trim($item) . '</li>';
            }
            $blockContent .= '</' . $listType . '>';
            break;
            
        case 'accordion':
            $sections = isset($data['sections']) ? $data['sections'] : [['title' => 'Section', 'content' => 'Content']];
            $blockContent = '<div class="accordion">';
            foreach ($sections as $section) {
                $blockContent .= '<div class="accordion-item">';
                $blockContent .= '<h3>' . $section['title'] . '</h3>';
                $blockContent .= '<div>' . $section['content'] . '</div>';
                $blockContent .= '</div>';
            }
            $blockContent .= '</div>';
            break;
            
        case 'form':
            $action = isset($data['action']) ? $data['action'] : '#';
            $method = isset($data['method']) ? $data['method'] : 'POST';
            $submitText = isset($data['submit_text']) ? $data['submit_text'] : 'Submit';
            $blockContent = '<form action="' . $action . '" method="' . $method . '">';
            $blockContent .= '<input type="text" name="name" placeholder="Name" required>';
            $blockContent .= '<button type="submit">' . $submitText . '</button>';
            $blockContent .= '</form>';
            break;
            
        case 'media':
            $src = isset($data['src']) ? $data['src'] : 'https://placehold.co/600x400';
            $alt = isset($data['alt']) ? $data['alt'] : 'Image';
            $caption = isset($data['caption']) ? $data['caption'] : '';
            $class = isset($data['class']) ? $data['class'] : '';
            $blockContent = '<figure>';
            $blockContent .= '<img src="' . $src . '" alt="' . $alt . '" class="' . $class . '">';
            if ($caption) {
                $blockContent .= '<figcaption>' . $caption . '</figcaption>';
            }
            $blockContent .= '</figure>';
            break;
            
        case 'slider':
            $slides = isset($data['slides']) ? $data['slides'] : [['src' => 'https://placehold.co/800x400', 'alt' => 'Slide']];
            $blockContent = '<div class="slider">';
            foreach ($slides as $slide) {
                $blockContent .= '<img src="' . $slide['src'] . '" alt="' . $slide['alt'] . '">';
            }
            $blockContent .= '</div>';
            break;
            
        case 'menu':
            $orientation = isset($data['orientation']) ? $data['orientation'] : 'horizontal';
            $style = isset($data['style']) ? $data['style'] : 'simple';
            $blockContent = '<nav class="menu menu-' . $orientation . ' menu-' . $style . '">';
            $blockContent .= '<a href="#">Home</a><a href="#">About</a><a href="#">Contact</a>';
            $blockContent .= '</nav>';
            break;
            
        case 'social':
            $platforms = isset($data['platforms']) ? $data['platforms'] : 'facebook,twitter,instagram';
            $platformArray = explode(',', $platforms);
            $blockContent = '<div class="social-buttons">';
            foreach ($platformArray as $platform) {
                $blockContent .= '<a href="#" class="social-' . trim($platform) . '">' . ucfirst(trim($platform)) . '</a>';
            }
            $blockContent .= '</div>';
            break;
            
        case 'logo':
            $type = isset($data['type']) ? $data['type'] : 'text';
            $text = isset($data['text']) ? $data['text'] : 'LOGO';
            $imageUrl = isset($data['image_url']) ? $data['image_url'] : '';
            $textFont = isset($data['text_font']) ? $data['text_font'] : '';
            $textSize = isset($data['text_size']) ? $data['text_size'] : '';
            $imageSize = isset($data['image_size']) ? $data['image_size'] : '';
            
            $blockContent = '<div class="logo">';
            
            // Add image if type is 'image' or 'both'
            if (($type === 'image' || $type === 'both') && $imageUrl) {
                $imgStyle = $imageSize ? 'style="width: ' . $imageSize . '; height: auto;"' : '';
                $blockContent .= '<img src="' . $imageUrl . '" alt="' . $text . '" ' . $imgStyle . '>';
            }
            
            // Add text if type is 'text' or 'both'
            if ($type === 'text' || $type === 'both') {
                $textStyle = '';
                if ($textFont) $textStyle .= 'font-family: ' . $textFont . '; ';
                if ($textSize) $textStyle .= 'font-size: ' . $textSize . '; ';
                $styleAttr = $textStyle ? 'style="' . $textStyle . '"' : '';
                $blockContent .= '<span ' . $styleAttr . '>' . $text . '</span>';
            }
            
            $blockContent .= '</div>';
            break;
            
        case 'markdown':
            $content = isset($data['content']) ? $data['content'] : '# Heading\n\nParagraph';
            $blockContent = '<div class="markdown-content">' . nl2br($content) . '</div>';
            break;
            
        // Form Field Blocks
        case 'checkbox':
            $name = isset($data['name']) ? $data['name'] : 'checkbox';
            $label = isset($data['label']) ? $data['label'] : 'Checkbox';
            $value = isset($data['value']) ? $data['value'] : '1';
            $checked = isset($data['checked']) && $data['checked'] ? ' checked' : '';
            $blockContent = '<label><input type="checkbox" name="' . $name . '" value="' . $value . '"' . $checked . '> ' . $label . '</label>';
            break;
            
        case 'inputfield':
            $name = isset($data['name']) ? $data['name'] : 'input';
            $label = isset($data['label']) ? $data['label'] : '';
            $placeholder = isset($data['placeholder']) ? $data['placeholder'] : '';
            $inputType = isset($data['input_type']) ? $data['input_type'] : 'text';
            $blockContent = '<div class="form-group">';
            if ($label) $blockContent .= '<label>' . $label . '</label>';
            $blockContent .= '<input type="' . $inputType . '" name="' . $name . '" placeholder="' . $placeholder . '">';
            $blockContent .= '</div>';
            break;
            
        case 'passwordfield':
            $name = isset($data['name']) ? $data['name'] : 'password';
            $label = isset($data['label']) ? $data['label'] : 'Password';
            $blockContent = '<div class="form-group">';
            if ($label) $blockContent .= '<label>' . $label . '</label>';
            $blockContent .= '<input type="password" name="' . $name . '">';
            $blockContent .= '</div>';
            break;
            
        case 'textareafield':
            $name = isset($data['name']) ? $data['name'] : 'textarea';
            $label = isset($data['label']) ? $data['label'] : '';
            $rows = isset($data['rows']) ? $data['rows'] : 4;
            $blockContent = '<div class="form-group">';
            if ($label) $blockContent .= '<label>' . $label . '</label>';
            $blockContent .= '<textarea name="' . $name . '" rows="' . $rows . '"></textarea>';
            $blockContent .= '</div>';
            break;
            
        case 'selectfield':
            $name = isset($data['name']) ? $data['name'] : 'select';
            $label = isset($data['label']) ? $data['label'] : '';
            $options = isset($data['options']) ? $data['options'] : [];
            $blockContent = '<div class="form-group">';
            if ($label) $blockContent .= '<label>' . $label . '</label>';
            $blockContent .= '<select name="' . $name . '">';
            $blockContent .= '<option value="">-- Select --</option>';
            foreach ($options as $opt) {
                $blockContent .= '<option value="' . $opt['value'] . '">' . $opt['label'] . '</option>';
            }
            $blockContent .= '</select>';
            $blockContent .= '</div>';
            break;
            
        case 'radiobuttons':
            $name = isset($data['name']) ? $data['name'] : 'radio';
            $label = isset($data['label']) ? $data['label'] : '';
            $options = isset($data['options']) ? $data['options'] : [];
            $blockContent = '<div class="form-group">';
            if ($label) $blockContent .= '<label>' . $label . '</label>';
            foreach ($options as $opt) {
                $blockContent .= '<label><input type="radio" name="' . $name . '" value="' . $opt['value'] . '"> ' . $opt['label'] . '</label>';
            }
            $blockContent .= '</div>';
            break;
            
        case 'datepicker':
            $name = isset($data['name']) ? $data['name'] : 'date';
            $label = isset($data['label']) ? $data['label'] : 'Date';
            $blockContent = '<div class="form-group">';
            if ($label) $blockContent .= '<label>' . $label . '</label>';
            $blockContent .= '<input type="date" name="' . $name . '">';
            $blockContent .= '</div>';
            break;
            
        case 'timepicker':
            $name = isset($data['name']) ? $data['name'] : 'time';
            $label = isset($data['label']) ? $data['label'] : 'Time';
            $blockContent = '<div class="form-group">';
            if ($label) $blockContent .= '<label>' . $label . '</label>';
            $blockContent .= '<input type="time" name="' . $name . '">';
            $blockContent .= '</div>';
            break;
            
        case 'datetimepicker':
            $name = isset($data['name']) ? $data['name'] : 'datetime';
            $label = isset($data['label']) ? $data['label'] : 'Date & Time';
            $blockContent = '<div class="form-group">';
            if ($label) $blockContent .= '<label>' . $label . '</label>';
            $blockContent .= '<input type="datetime-local" name="' . $name . '">';
            $blockContent .= '</div>';
            break;
            
        case 'fileupload':
            $name = isset($data['name']) ? $data['name'] : 'file';
            $label = isset($data['label']) ? $data['label'] : 'Upload File';
            $blockContent = '<div class="form-group">';
            if ($label) $blockContent .= '<label>' . $label . '</label>';
            $blockContent .= '<input type="file" name="' . $name . '">';
            $blockContent .= '</div>';
            break;
            
        case 'togglefield':
            $name = isset($data['name']) ? $data['name'] : 'toggle';
            $label = isset($data['label']) ? $data['label'] : 'Toggle';
            $checked = isset($data['checked']) && $data['checked'] ? ' checked' : '';
            $blockContent = '<label class="toggle-switch">';
            $blockContent .= '<input type="checkbox" name="' . $name . '"' . $checked . '>';
            $blockContent .= '<span class="toggle-slider"></span>';
            $blockContent .= '<span class="toggle-label">' . $label . '</span>';
            $blockContent .= '</label>';
            break;
            
        case 'submitbutton':
            $text = isset($data['text']) ? $data['text'] : 'Submit';
            $style = isset($data['style']) ? $data['style'] : 'primary';
            $blockContent = '<button type="submit" class="btn btn-' . $style . '">' . $text . '</button>';
            break;
            
        case 'clearbutton':
            $text = isset($data['text']) ? $data['text'] : 'Clear';
            $style = isset($data['style']) ? $data['style'] : 'secondary';
            $blockContent = '<button type="reset" class="btn btn-' . $style . '">' . $text . '</button>';
            break;
            
        default:
            $blockContent .= '<div class="block-' . $type . '">Block: ' . $type . '</div>';
    }
    
    // Wrap with inline styles if needed
    if (!empty($inlineStyles)) {
        return '<div style="' . $inlineStyles . '">' . $blockContent . '</div>';
    }
    
    return $blockContent;
}

/**
 * Build inline style string from block data
 */
function buildInlineStyles($data) {
    $styles = [];
    
    // Padding
    if (isset($data['padding_type'])) {
        if ($data['padding_type'] === 'all' && !empty($data['padding_all'])) {
            $styles[] = 'padding: ' . $data['padding_all'];
        } elseif ($data['padding_type'] === 'individual') {
            if (!empty($data['padding_top'])) $styles[] = 'padding-top: ' . $data['padding_top'];
            if (!empty($data['padding_right'])) $styles[] = 'padding-right: ' . $data['padding_right'];
            if (!empty($data['padding_bottom'])) $styles[] = 'padding-bottom: ' . $data['padding_bottom'];
            if (!empty($data['padding_left'])) $styles[] = 'padding-left: ' . $data['padding_left'];
        }
    }
    
    // Margin
    if (isset($data['margin_type'])) {
        if ($data['margin_type'] === 'all' && !empty($data['margin_all'])) {
            $styles[] = 'margin: ' . $data['margin_all'];
        } elseif ($data['margin_type'] === 'individual') {
            if (!empty($data['margin_top'])) $styles[] = 'margin-top: ' . $data['margin_top'];
            if (!empty($data['margin_right'])) $styles[] = 'margin-right: ' . $data['margin_right'];
            if (!empty($data['margin_bottom'])) $styles[] = 'margin-bottom: ' . $data['margin_bottom'];
            if (!empty($data['margin_left'])) $styles[] = 'margin-left: ' . $data['margin_left'];
        }
    }
    
    // Dimensions
    if (!empty($data['width'])) $styles[] = 'width: ' . $data['width'];
    if (!empty($data['height'])) $styles[] = 'height: ' . $data['height'];
    
    // Min/Max dimensions
    if (isset($data['use_min_width']) && $data['use_min_width'] && !empty($data['min_width'])) {
        $styles[] = 'min-width: ' . $data['min_width'];
    }
    if (isset($data['use_max_width']) && $data['use_max_width'] && !empty($data['max_width'])) {
        $styles[] = 'max-width: ' . $data['max_width'];
    }
    if (isset($data['use_min_height']) && $data['use_min_height'] && !empty($data['min_height'])) {
        $styles[] = 'min-height: ' . $data['min_height'];
    }
    if (isset($data['use_max_height']) && $data['use_max_height'] && !empty($data['max_height'])) {
        $styles[] = 'max-height: ' . $data['max_height'];
    }
    
    return !empty($styles) ? implode('; ', $styles) : '';
}

/**
 * Generate PHP code for a single block
 */
function generateBlockCode($block) {
    $type = $block['type'];
    $data = $block['data'];
    
    // Build inline styles from common properties
    $inlineStyles = buildInlineStyles($data);
    
    $code = "    <?php\n";
    $code .= "    // Block: {$type}\n";
    
    // If we have inline styles, wrap the block in a styled div
    if (!empty($inlineStyles)) {
        $code .= "    echo '<div style=\"" . addslashes($inlineStyles) . "\">';\n";
    }
    
    switch ($type) {
        case 'container':
            $width = isset($data['width']) ? $data['width'] : 'wide';
            $class = isset($data['class']) ? $data['class'] : '';
            
            // Generate child blocks content
            $childrenContent = '';
            if (isset($block['children']) && is_array($block['children'])) {
                foreach ($block['children'] as $child) {
                    $childrenContent .= generateChildBlockCode($child);
                }
            }
            
            // Use heredoc syntax to avoid escaping issues with HTML
            if (!empty($childrenContent)) {
                $code .= "    echo block_container(<<<'HTML'\n";
                $code .= $childrenContent . "\n";
                $code .= "HTML\n";
                $code .= "    , '" . addslashes($class) . "', '" . addslashes($inlineStyles) . "', '{$width}');\n";
            } else {
                $code .= "    echo block_container(\n";
                $code .= "        '',\n";
                $code .= "        '" . addslashes($class) . "',\n";
                $code .= "        '" . addslashes($inlineStyles) . "',\n";
                $code .= "        '{$width}'\n";
                $code .= "    );\n";
            }
            break;
            
        case 'textview':
            $content = isset($data['content']) ? $data['content'] : 'Sample text content';
            $type = isset($data['type']) ? $data['type'] : 'paragraph';
            $level = isset($data['level']) ? $data['level'] : 2;
            $fontFamily = isset($data['font_family']) ? $data['font_family'] : '';
            $fontSize = isset($data['font_size']) ? $data['font_size'] : '';
            $fontWeight = isset($data['font_weight']) ? $data['font_weight'] : 'normal';
            $class = isset($data['class']) ? $data['class'] : '';
            
            $code .= "    echo block_textview(\n";
            $code .= "        '" . addslashes($content) . "',\n";
            $code .= "        '{$type}',\n";
            $code .= "        [\n";
            $code .= "            'level' => {$level},\n";
            if ($fontFamily) $code .= "            'font_family' => '" . addslashes($fontFamily) . "',\n";
            if ($fontSize) $code .= "            'font_size' => '" . addslashes($fontSize) . "',\n";
            if ($fontWeight !== 'normal') $code .= "            'font_weight' => '{$fontWeight}',\n";
            if ($class) $code .= "            'class' => '" . addslashes($class) . "',\n";
            $code .= "        ]\n";
            $code .= "    );\n";
            break;
            
        case 'button':
            $text = isset($data['text']) ? $data['text'] : 'Click Me';
            $url = isset($data['url']) ? $data['url'] : '#';
            $btnType = isset($data['type']) ? $data['type'] : 'primary';
            $size = isset($data['size']) ? $data['size'] : 'medium';
            $class = isset($data['class']) ? $data['class'] : '';
            $code .= "    echo block_button(\n";
            $code .= "        '" . addslashes($text) . "',\n";
            $code .= "        '" . addslashes($url) . "',\n";
            $code .= "        '{$btnType}',\n";
            $code .= "        '{$size}',\n";
            $code .= "        '" . addslashes($class) . "'\n";
            $code .= "    );\n";
            break;
            
        case 'buttongroup':
            $buttons = isset($data['buttons']) ? $data['buttons'] : [['text' => 'Button 1', 'url' => '#', 'type' => 'primary']];
            $alignment = isset($data['alignment']) ? $data['alignment'] : 'left';
            $class = isset($data['class']) ? $data['class'] : '';
            
            $code .= "    echo block_button_group(\n";
            $code .= "        [\n";
            foreach ($buttons as $btn) {
                $btnText = isset($btn['text']) ? $btn['text'] : 'Button';
                $btnUrl = isset($btn['url']) ? $btn['url'] : '#';
                $btnType = isset($btn['type']) ? $btn['type'] : 'primary';
                $code .= "            ['text' => '" . addslashes($btnText) . "', 'url' => '" . addslashes($btnUrl) . "', 'type' => '{$btnType}'],\n";
            }
            $code .= "        ],\n";
            $code .= "        '{$alignment}'\n";
            $code .= "    );\n";
            break;
            
        case 'card':
            $title = isset($data['title']) ? $data['title'] : 'Card Title';
            $content = isset($data['content']) ? $data['content'] : 'Card content';
            $footer = isset($data['footer']) ? $data['footer'] : '';
            $icon = isset($data['icon']) ? $data['icon'] : '';
            $icon_shape = isset($data['icon_shape']) ? $data['icon_shape'] : 'none';
            $icon_color = isset($data['icon_color']) ? $data['icon_color'] : '';
            $spacing = isset($data['spacing']) ? $data['spacing'] : '';
            $class = isset($data['class']) ? $data['class'] : '';
            
            $code .= "    echo block_card([\n";
            $code .= "        'title' => '" . addslashes($title) . "',\n";
            $code .= "        'content' => '" . addslashes($content) . "',\n";
            $code .= "        'footer' => '" . addslashes($footer) . "',\n";
            $code .= "        'icon' => '" . addslashes($icon) . "',\n";
            $code .= "        'icon_shape' => '" . addslashes($icon_shape) . "',\n";
            $code .= "        'icon_color' => '" . addslashes($icon_color) . "',\n";
            $code .= "        'spacing' => '" . addslashes($spacing) . "',\n";
            $code .= "        'class' => '" . addslashes($class) . "'\n";
            $code .= "    ]);\n";
            break;
            
        case 'alert':
            $message = isset($data['message']) ? $data['message'] : 'Alert message';
            $title = isset($data['title']) ? $data['title'] : '';
            $alertId = isset($data['alert_id']) ? $data['alert_id'] : '';
            $alertType = isset($data['alert_type']) ? $data['alert_type'] : 'alert';
            $alertTheme = isset($data['alert_theme']) ? $data['alert_theme'] : 'info';
            $dismissable = isset($data['dismissable']) ? $data['dismissable'] : true;
            $class = isset($data['class']) ? $data['class'] : '';
            
            $code .= "    echo block_alert([\n";
            $code .= "        'message' => '" . addslashes($message) . "',\n";
            if ($title) $code .= "        'title' => '" . addslashes($title) . "',\n";
            if ($alertId) $code .= "        'id' => '" . addslashes($alertId) . "',\n";
            $code .= "        'type' => '{$alertType}',\n";
            $code .= "        'theme' => '{$alertTheme}',\n";
            $code .= "        'dismissable' => " . ($dismissable ? 'true' : 'false') . ",\n";
            if ($class) $code .= "        'class' => '" . addslashes($class) . "',\n";
            $code .= "        'style' => 'inline'\n";
            $code .= "    ]);\n";
            break;
            
        case 'hero':
            $title = isset($data['title']) ? $data['title'] : 'Hero Title';
            $subtitle = isset($data['subtitle']) ? $data['subtitle'] : 'Hero subtitle';
            $heroType = isset($data['type']) ? $data['type'] : 'default';
            $background = isset($data['background']) ? $data['background'] : '';
            $code .= "    echo block_hero([\n";
            $code .= "        'title' => '" . addslashes($title) . "',\n";
            $code .= "        'subtitle' => '" . addslashes($subtitle) . "',\n";
            $code .= "        'type' => '{$heroType}',\n";
            if ($background) {
                $code .= "        'background' => '" . addslashes($background) . "',\n";
            }
            $code .= "        'height' => '400px'\n";
            $code .= "    ]);\n";
            break;
            
        case 'list':
            $items = isset($data['items']) ? $data['items'] : "Item 1\nItem 2\nItem 3";
            $listType = isset($data['type']) ? $data['type'] : 'ul';
            $itemsArray = array_filter(explode("\n", $items));
            $code .= "    echo block_list([\n";
            foreach ($itemsArray as $item) {
                $code .= "        '" . addslashes(trim($item)) . "',\n";
            }
            $code .= "    ], '{$listType}');\n";
            break;
            
        case 'accordion':
            $sections = isset($data['sections']) ? $data['sections'] : [['title' => 'Section 1', 'content' => 'Content 1']];
            $code .= "    echo block_accordion([\n";
            foreach ($sections as $section) {
                $code .= "        [\n";
                $code .= "            'title' => '" . addslashes($section['title']) . "',\n";
                $code .= "            'content' => '" . addslashes($section['content']) . "'\n";
                $code .= "        ],\n";
            }
            $code .= "    ]);\n";
            break;
            
        case 'slider':
            $slides = isset($data['slides']) ? $data['slides'] : [['src' => 'https://placehold.co/800x400', 'alt' => 'Slide 1', 'caption' => '']];
            $showArrows = isset($data['show_arrows']) ? $data['show_arrows'] : true;
            $showDots = isset($data['show_dots']) ? $data['show_dots'] : true;
            $showCaption = isset($data['show_caption']) ? $data['show_caption'] : true;
            $transition = isset($data['transition']) ? $data['transition'] : 'slide';
            $autoplay = isset($data['autoplay']) ? $data['autoplay'] : true;
            $class = isset($data['class']) ? $data['class'] : '';
            
            $code .= "    echo block_slider([\n";
            foreach ($slides as $slide) {
                $code .= "        [\n";
                $code .= "            'src' => '" . addslashes($slide['src']) . "',\n";
                $code .= "            'alt' => '" . addslashes($slide['alt']) . "',\n";
                if (!empty($slide['caption'])) {
                    $code .= "            'caption' => '" . addslashes($slide['caption']) . "',\n";
                }
                $code .= "        ],\n";
            }
            $code .= "    ], 'image', [\n";
            $code .= "        'autoplay' => " . ($autoplay ? 'true' : 'false') . ",\n";
            $code .= "        'show_arrows' => " . ($showArrows ? 'true' : 'false') . ",\n";
            $code .= "        'show_dots' => " . ($showDots ? 'true' : 'false') . ",\n";
            $code .= "        'show_caption' => " . ($showCaption ? 'true' : 'false') . ",\n";
            $code .= "        'transition' => '{$transition}',\n";
            if ($class) $code .= "        'class' => '" . addslashes($class) . "',\n";
            $code .= "    ]);\n";
            break;
            
        case 'menu':
            $items = isset($data['items']) ? $data['items'] : [['text' => 'Home', 'url' => '#', 'icon' => ''], ['text' => 'About', 'url' => '#', 'icon' => '']];
            $showIcons = isset($data['show_icons']) ? $data['show_icons'] : false;
            $menuShape = isset($data['menu_shape']) ? $data['menu_shape'] : 'simple';
            $orientation = isset($data['orientation']) ? $data['orientation'] : 'horizontal';
            $class = isset($data['class']) ? $data['class'] : '';
            
            $code .= "    echo block_menu([\n";
            foreach ($items as $item) {
                $code .= "        [\n";
                $code .= "            'text' => '" . addslashes($item['text']) . "',\n";
                $code .= "            'url' => '" . addslashes($item['url']) . "',\n";
                if ($showIcons && !empty($item['icon'])) {
                    $code .= "            'icon' => '" . addslashes($item['icon']) . "',\n";
                }
                $code .= "        ],\n";
            }
            $code .= "    ], '{$orientation}', '{$menuShape}');\n";
            break;
            
        case 'social':
            $buttons = isset($data['buttons']) ? $data['buttons'] : [['name' => 'Facebook', 'icon' => 'fab fa-facebook', 'url' => '#']];
            $socialStyle = isset($data['style']) ? $data['style'] : 'icon';
            $class = isset($data['class']) ? $data['class'] : '';
            
            $code .= "    echo block_social_buttons([\n";
            foreach ($buttons as $btn) {
                $code .= "        [\n";
                $code .= "            'name' => '" . addslashes($btn['name']) . "',\n";
                $code .= "            'icon' => '" . addslashes($btn['icon']) . "',\n";
                $code .= "            'url' => '" . addslashes($btn['url']) . "',\n";
                $code .= "        ],\n";
            }
            $code .= "    ], '{$socialStyle}');\n";
            break;
            
        case 'logo':
            $type = isset($data['type']) ? $data['type'] : 'text';
            $text = isset($data['text']) ? $data['text'] : 'LOGO';
            $imageUrl = isset($data['image_url']) ? $data['image_url'] : '';
            $textFont = isset($data['text_font']) ? $data['text_font'] : '';
            $textSize = isset($data['text_size']) ? $data['text_size'] : '';
            $imageWidth = isset($data['image_width']) ? $data['image_width'] : '';
            $imageHeight = isset($data['image_height']) ? $data['image_height'] : '';
            
            $code .= "    echo block_logo([\n";
            
            // Add image if type is 'image' or 'both'
            if (($type === 'image' || $type === 'both') && $imageUrl) {
                $code .= "        'image_url' => '" . addslashes($imageUrl) . "',\n";
            }
            
            // Add image dimensions if provided (regardless of type)
            if ($imageWidth) {
                $code .= "        'image_width' => '" . addslashes($imageWidth) . "',\n";
            }
            if ($imageHeight) {
                $code .= "        'image_height' => '" . addslashes($imageHeight) . "',\n";
            }
            
            // Add text if type is 'text' or 'both'
            if ($type === 'text' || $type === 'both') {
                $code .= "        'text' => '" . addslashes($text) . "',\n";
                if ($textFont) {
                    $code .= "        'text_font' => '" . addslashes($textFont) . "',\n";
                }
                if ($textSize) {
                    $code .= "        'text_size' => '" . addslashes($textSize) . "',\n";
                }
            }
            
            $code .= "    ]);\n";
            break;
            
        case 'markdown':
            $src = isset($data['content']) ? $data['content'] : 'documentation/README.md';
            $code .= "    echo block_markdown('" . addslashes($src) . "');\n";
            break;
            
        case 'form':
            $action = isset($data['action']) ? $data['action'] : '#';
            $method = isset($data['method']) ? $data['method'] : 'POST';
            $class = isset($data['class']) ? $data['class'] : '';
            
            // Generate child blocks content (form fields)
            $childrenContent = '';
            if (isset($block['children']) && is_array($block['children'])) {
                foreach ($block['children'] as $child) {
                    $childrenContent .= generateChildBlockCode($child);
                }
            }
            
            // Use heredoc syntax to avoid escaping issues with HTML
            if (!empty($childrenContent)) {
                $code .= "    echo block_form([\n";
                $code .= "        'action' => '" . addslashes($action) . "',\n";
                $code .= "        'method' => '{$method}',\n";
                $code .= "        'class' => '" . addslashes($class) . "',\n";
                $code .= "        'content' => <<<'HTML'\n";
                $code .= $childrenContent . "\n";
                $code .= "HTML\n";
                $code .= "    ]);\n";
            } else {
                // Empty form - just render the form tags
                $code .= "    echo block_form([\n";
                $code .= "        'action' => '" . addslashes($action) . "',\n";
                $code .= "        'method' => '{$method}',\n";
                $code .= "        'class' => '" . addslashes($class) . "',\n";
                $code .= "        'content' => ''\n";
                $code .= "    ]);\n";
            }
            break;
            
        case 'media':
            $src = isset($data['src']) ? $data['src'] : 'https://placehold.co/600x400';
            $alt = isset($data['alt']) ? $data['alt'] : 'Image';
            $caption = isset($data['caption']) ? $data['caption'] : '';
            $class = isset($data['class']) ? $data['class'] : '';
            
            $code .= "    echo block_image(\n";
            $code .= "        '" . addslashes($src) . "',\n";
            $code .= "        '" . addslashes($alt) . "',\n";
            $code .= "        '" . addslashes($caption) . "',\n";
            $code .= "        '" . addslashes($class) . "'\n";
            $code .= "    );\n";
            break;
            
        // Form field blocks - these are typically used inside form containers
        case 'checkbox':
        case 'inputfield':
        case 'radiobuttons':
        case 'datepicker':
        case 'timepicker':
        case 'datetimepicker':
        case 'fileupload':
        case 'passwordfield':
        case 'selectfield':
        case 'textareafield':
        case 'togglefield':
        case 'clearbutton':
        case 'submitbutton':
            // These blocks generate their HTML directly
            $code .= "    echo '" . addslashes(generateChildBlockCode($block)) . "';\n";
            break;
            
        default:
            // Generic fallback
            $code .= "    // Block type '{$type}' - add implementation\n";
            $code .= "    echo '<div class=\"block-{$type}\">Block: {$type}</div>';\n";
    }
    
    // Close the wrapper div if we have inline styles
    if (!empty($inlineStyles)) {
        $code .= "    echo '</div>';\n";
    }
    
    $code .= "    ?>\n\n";
    
    return $code;
}

/**
 * Sanitize page name
 */
function sanitizePageName($name) {
    // Only allow lowercase letters, numbers, and hyphens
    $name = strtolower(trim($name));
    $name = preg_replace('/[^a-z0-9-]/', '', $name);
    
    // Prevent directory traversal
    if (strpos($name, '..') !== false || strpos($name, '/') !== false) {
        return false;
    }
    
    return $name;
}

/**
 * Send success response
 */
function sendSuccess($data = []) {
    echo json_encode(array_merge(['success' => true], $data));
    exit;
}

/**
 * Send error response
 */
function sendError($message) {
    echo json_encode([
        'success' => false,
        'error' => $message
    ]);
    exit;
}
