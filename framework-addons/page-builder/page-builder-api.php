<?php
/**
 * Page Builder API
 * Handles save, load, and delete operations for pages
 */

// Start session if not already started
if (session_status() === PHP_SESSION_NONE) {
    session_start();
}

// Load configuration
require_once __DIR__ . '/../../config.php';

// Set JSON header
header('Content-Type: application/json');

// Get request method
$method = $_SERVER['REQUEST_METHOD'];

// Handle GET requests (load page)
if ($method === 'GET') {
    handleLoadPage();
}

// Handle POST requests (save/delete page)
if ($method === 'POST') {
    $input = file_get_contents('php://input');
    $data = json_decode($input, true);
    
    if (!$data || !isset($data['action'])) {
        sendError('Invalid request');
    }
    
    switch ($data['action']) {
        case 'save':
            handleSavePage($data);
            break;
        case 'delete':
            handleDeletePage($data);
            break;
        default:
            sendError('Unknown action');
    }
}

/**
 * Load a page's block data
 */
function handleLoadPage() {
    if (!isset($_GET['page'])) {
        sendError('Page name not provided');
    }
    
    $pageName = sanitizePageName($_GET['page']);
    if (!$pageName) {
        sendError('Invalid page name');
    }
    
    $pageFile = PAGES_DIR . '/' . $pageName . '.php';
    
    if (!file_exists($pageFile)) {
        sendError('Page not found');
    }
    
    // Read the page file and extract block data
    $content = file_get_contents($pageFile);
    
    // Try to extract JSON data from comment at the top of the file
    // Look for PAGE_BUILDER_DATA: followed by JSON (can span multiple lines in comment)
    if (preg_match('/PAGE_BUILDER_DATA:\s*(\{.+?\})\s*\*\//s', $content, $matches)) {
        $blockData = json_decode($matches[1], true);
        if ($blockData && isset($blockData['blocks'])) {
            sendSuccess(['blocks' => $blockData['blocks']]);
        }
    }
    
    // If no data found, return empty
    sendSuccess(['blocks' => []]);
}

/**
 * Save a page with block data
 */
function handleSavePage($data) {
    if (!isset($data['pageName']) || !isset($data['blocks'])) {
        sendError('Missing required fields');
    }
    
    $pageName = sanitizePageName($data['pageName']);
    if (!$pageName) {
        sendError('Invalid page name');
    }
    
    $blocks = $data['blocks'];
    
    // Log what we're saving
    error_log('Saving page: ' . $pageName);
    error_log('Blocks data: ' . json_encode($blocks));
    
    // Generate PHP code for the page
    $phpCode = generatePagePHP($pageName, $blocks);
    
    // Log generated code
    error_log('Generated PHP length: ' . strlen($phpCode));
    
    // Save to file
    $pageFile = PAGES_DIR . '/' . $pageName . '.php';
    
    $result = file_put_contents($pageFile, $phpCode);
    if ($result === false) {
        sendError('Failed to write page file');
    }
    
    error_log('Wrote ' . $result . ' bytes to ' . $pageFile);
    
    // Return a preview of what was saved
    $preview = substr($phpCode, 0, 500);
    
    sendSuccess([
        'message' => 'Page saved successfully', 
        'file' => $pageName . '.php', 
        'bytes' => $result,
        'preview' => $preview,
        'blockCount' => count($blocks)
    ]);
}

/**
 * Delete a page
 */
function handleDeletePage($data) {
    if (!isset($data['pageName'])) {
        sendError('Page name not provided');
    }
    
    $pageName = sanitizePageName($data['pageName']);
    if (!$pageName) {
        sendError('Invalid page name');
    }
    
    $pageFile = PAGES_DIR . '/' . $pageName . '.php';
    
    if (!file_exists($pageFile)) {
        sendError('Page not found');
    }
    
    if (!unlink($pageFile)) {
        sendError('Failed to delete page file');
    }
    
    sendSuccess(['message' => 'Page deleted successfully']);
}

/**
 * Generate PHP code for a page from block data
 */
function generatePagePHP($pageName, $blocks) {
    $pageTitle = ucfirst(str_replace('-', ' ', $pageName));
    
    // Store block data as JSON in a comment for later editing
    $blockDataJson = json_encode(['blocks' => $blocks], JSON_PRETTY_PRINT);
    
    $php = "<?php\n";
    $php .= "/**\n";
    $php .= " * Page: {$pageTitle}\n";
    $php .= " * Generated by Page Builder\n";
    $php .= " * \n";
    $php .= " * PAGE_BUILDER_DATA: " . json_encode(['blocks' => $blocks]) . "\n";
    $php .= " */\n\n";
    $php .= "// Set page metadata\n";
    $php .= "set_page_meta([\n";
    $php .= "    'title' => '{$pageTitle}',\n";
    $php .= "    'description' => 'Page created with Page Builder'\n";
    $php .= "]);\n";
    $php .= "?>\n\n";
    $php .= "<article class=\"page-content\">\n";
    $php .= "    <h1>{$pageTitle}</h1>\n\n";
    
    // Generate block code
    foreach ($blocks as $block) {
        $php .= generateBlockCode($block);
    }
    
    $php .= "</article>\n";
    
    return $php;
}

/**
 * Generate PHP code for a child block (inline, no PHP tags)
 */
function generateChildBlockCode($block) {
    $type = $block['type'];
    $data = $block['data'];
    $output = '';
    
    switch ($type) {
        case 'textview':
            $content = isset($data['content']) ? $data['content'] : 'Text content';
            $viewType = isset($data['type']) ? $data['type'] : 'paragraph';
            $level = isset($data['level']) ? intval($data['level']) : 2;
            
            if ($viewType === 'heading') {
                $output = '<h' . $level . '>' . $content . '</h' . $level . '>';
            } elseif ($viewType === 'quote') {
                $output = '<blockquote>' . $content . '</blockquote>';
            } elseif ($viewType === 'code') {
                $output = '<pre><code>' . $content . '</code></pre>';
            } else {
                $output = '<p>' . $content . '</p>';
            }
            break;
            
        case 'button':
            $text = isset($data['text']) ? $data['text'] : 'Click Me';
            $url = isset($data['url']) ? $data['url'] : '#';
            $btnType = isset($data['type']) ? $data['type'] : 'primary';
            $output = '<a href="' . $url . '" class="btn btn-' . $btnType . '">' . $text . '</a>';
            break;
            
        case 'buttongroup':
            $buttons = isset($data['buttons']) ? $data['buttons'] : [['text' => 'Button 1', 'url' => '#', 'type' => 'primary']];
            $alignment = isset($data['alignment']) ? $data['alignment'] : 'left';
            $output = '<div class="btn-group btn-group-' . $alignment . '">';
            foreach ($buttons as $btn) {
                $output .= '<a href="' . $btn['url'] . '" class="btn btn-' . $btn['type'] . '">' . $btn['text'] . '</a>';
            }
            $output .= '</div>';
            break;
            
        case 'card':
            $title = isset($data['title']) ? $data['title'] : 'Card Title';
            $content = isset($data['content']) ? $data['content'] : 'Card content';
            $output = '<div class="card"><h3>' . $title . '</h3><p>' . $content . '</p></div>';
            break;
            
        case 'alert':
            $message = isset($data['message']) ? $data['message'] : 'Alert message';
            $alertType = isset($data['type']) ? $data['type'] : 'info';
            $title = isset($data['title']) ? $data['title'] : '';
            $output = '<div class="alert alert-' . $alertType . '">';
            if ($title) {
                $output .= '<strong>' . $title . '</strong> ';
            }
            $output .= $message . '</div>';
            break;
            
        case 'hero':
            $title = isset($data['title']) ? $data['title'] : 'Hero Title';
            $subtitle = isset($data['subtitle']) ? $data['subtitle'] : '';
            $output = '<div class="hero"><h1>' . $title . '</h1>';
            if ($subtitle) {
                $output .= '<p>' . $subtitle . '</p>';
            }
            $output .= '</div>';
            break;
            
        case 'list':
            $items = isset($data['items']) ? $data['items'] : "Item 1\nItem 2\nItem 3";
            $listType = isset($data['type']) ? $data['type'] : 'ul';
            $itemsArray = array_filter(explode("\n", $items));
            $output = '<' . $listType . '>';
            foreach ($itemsArray as $item) {
                $output .= '<li>' . trim($item) . '</li>';
            }
            $output .= '</' . $listType . '>';
            break;
            
        case 'accordion':
            $sections = isset($data['sections']) ? $data['sections'] : [['title' => 'Section', 'content' => 'Content']];
            $output = '<div class="accordion">';
            foreach ($sections as $section) {
                $output .= '<div class="accordion-item">';
                $output .= '<h3>' . $section['title'] . '</h3>';
                $output .= '<div>' . $section['content'] . '</div>';
                $output .= '</div>';
            }
            $output .= '</div>';
            break;
            
        case 'form':
            $action = isset($data['action']) ? $data['action'] : '#';
            $method = isset($data['method']) ? $data['method'] : 'POST';
            $submitText = isset($data['submit_text']) ? $data['submit_text'] : 'Submit';
            $output = '<form action="' . $action . '" method="' . $method . '">';
            $output .= '<input type="text" name="name" placeholder="Name" required>';
            $output .= '<button type="submit">' . $submitText . '</button>';
            $output .= '</form>';
            break;
            
        case 'media':
            $src = isset($data['src']) ? $data['src'] : 'https://placehold.co/600x400';
            $alt = isset($data['alt']) ? $data['alt'] : 'Image';
            $caption = isset($data['caption']) ? $data['caption'] : '';
            $output = '<figure>';
            $output .= '<img src="' . $src . '" alt="' . $alt . '">';
            if ($caption) {
                $output .= '<figcaption>' . $caption . '</figcaption>';
            }
            $output .= '</figure>';
            break;
            
        case 'slider':
            $slides = isset($data['slides']) ? $data['slides'] : [['src' => 'https://placehold.co/800x400', 'alt' => 'Slide']];
            $output = '<div class="slider">';
            foreach ($slides as $slide) {
                $output .= '<img src="' . $slide['src'] . '" alt="' . $slide['alt'] . '">';
            }
            $output .= '</div>';
            break;
            
        case 'menu':
            $orientation = isset($data['orientation']) ? $data['orientation'] : 'horizontal';
            $style = isset($data['style']) ? $data['style'] : 'simple';
            $output = '<nav class="menu menu-' . $orientation . ' menu-' . $style . '">';
            $output .= '<a href="#">Home</a><a href="#">About</a><a href="#">Contact</a>';
            $output .= '</nav>';
            break;
            
        case 'social':
            $platforms = isset($data['platforms']) ? $data['platforms'] : 'facebook,twitter,instagram';
            $platformArray = explode(',', $platforms);
            $output = '<div class="social-buttons">';
            foreach ($platformArray as $platform) {
                $output .= '<a href="#" class="social-' . trim($platform) . '">' . ucfirst(trim($platform)) . '</a>';
            }
            $output .= '</div>';
            break;
            
        case 'logo':
            $text = isset($data['text']) ? $data['text'] : 'LOGO';
            $src = isset($data['src']) ? $data['src'] : '';
            if ($src) {
                $output = '<img src="' . $src . '" alt="' . $text . '" class="logo">';
            } else {
                $output = '<div class="logo">' . $text . '</div>';
            }
            break;
            
        case 'markdown':
            $content = isset($data['content']) ? $data['content'] : '# Heading\n\nParagraph';
            $output = '<div class="markdown-content">' . nl2br($content) . '</div>';
            break;
            
        default:
            $output = '<div class="block-' . $type . '">Block: ' . $type . '</div>';
    }
    
    return $output;
}

/**
 * Generate PHP code for a single block
 */
function generateBlockCode($block) {
    $type = $block['type'];
    $data = $block['data'];
    
    $code = "    <?php\n";
    $code .= "    // Block: {$type}\n";
    
    switch ($type) {
        case 'container':
            $width = isset($data['width']) ? $data['width'] : 'wide';
            $class = isset($data['class']) ? $data['class'] : '';
            
            // Generate child blocks content
            $childrenContent = '';
            if (isset($block['children']) && is_array($block['children'])) {
                foreach ($block['children'] as $child) {
                    $childrenContent .= generateChildBlockCode($child);
                }
            }
            
            // Use heredoc syntax to avoid escaping issues with HTML
            if (!empty($childrenContent)) {
                $code .= "    echo block_container(<<<'HTML'\n";
                $code .= $childrenContent . "\n";
                $code .= "HTML\n";
                $code .= "    , '" . addslashes($class) . "', '', '{$width}');\n";
            } else {
                $code .= "    echo block_container(\n";
                $code .= "        '',\n";
                $code .= "        '" . addslashes($class) . "',\n";
                $code .= "        '',\n";
                $code .= "        '{$width}'\n";
                $code .= "    );\n";
            }
            break;
            
        case 'textview':
            $content = isset($data['content']) ? $data['content'] : 'Text content';
            $viewType = isset($data['type']) ? $data['type'] : 'paragraph';
            $level = isset($data['level']) ? intval($data['level']) : 2;
            $code .= "    echo block_textview(\n";
            $code .= "        '" . addslashes($content) . "',\n";
            $code .= "        '{$viewType}',\n";
            $code .= "        ['level' => {$level}]\n";
            $code .= "    );\n";
            break;
            
        case 'button':
            $text = isset($data['text']) ? $data['text'] : 'Click Me';
            $url = isset($data['url']) ? $data['url'] : '#';
            $btnType = isset($data['type']) ? $data['type'] : 'primary';
            $size = isset($data['size']) ? $data['size'] : 'medium';
            $code .= "    echo block_button(\n";
            $code .= "        '" . addslashes($text) . "',\n";
            $code .= "        '" . addslashes($url) . "',\n";
            $code .= "        '{$btnType}',\n";
            $code .= "        '{$size}'\n";
            $code .= "    );\n";
            break;
            
        case 'buttongroup':
            $buttons = isset($data['buttons']) ? $data['buttons'] : [['text' => 'Button 1', 'url' => '#', 'type' => 'primary']];
            $alignment = isset($data['alignment']) ? $data['alignment'] : 'left';
            $code .= "    ?>\n";
            $code .= "    <div class=\"btn-group btn-group-{$alignment}\">\n";
            foreach ($buttons as $btn) {
                $code .= "        <?php echo block_button('" . addslashes($btn['text']) . "', '" . addslashes($btn['url']) . "', '{$btn['type']}'); ?>\n";
            }
            $code .= "    </div>\n";
            $code .= "    <?php\n";
            break;
            
        case 'card':
            $title = isset($data['title']) ? $data['title'] : 'Card Title';
            $content = isset($data['content']) ? $data['content'] : 'Card content';
            $footer = isset($data['footer']) ? $data['footer'] : '';
            $code .= "    echo block_card([\n";
            $code .= "        'title' => '" . addslashes($title) . "',\n";
            $code .= "        'content' => '" . addslashes($content) . "',\n";
            $code .= "        'footer' => '" . addslashes($footer) . "'\n";
            $code .= "    ]);\n";
            break;
            
        case 'alert':
            $message = isset($data['message']) ? $data['message'] : 'Alert message';
            $alertType = isset($data['type']) ? $data['type'] : 'info';
            $title = isset($data['title']) ? $data['title'] : '';
            $code .= "    echo block_alert([\n";
            $code .= "        'message' => '" . addslashes($message) . "',\n";
            $code .= "        'type' => '{$alertType}',\n";
            if ($title) {
                $code .= "        'title' => '" . addslashes($title) . "',\n";
            }
            $code .= "        'style' => 'inline'\n";
            $code .= "    ]);\n";
            break;
            
        case 'hero':
            $title = isset($data['title']) ? $data['title'] : 'Hero Title';
            $subtitle = isset($data['subtitle']) ? $data['subtitle'] : 'Hero subtitle';
            $heroType = isset($data['type']) ? $data['type'] : 'default';
            $background = isset($data['background']) ? $data['background'] : '';
            $code .= "    echo block_hero([\n";
            $code .= "        'title' => '" . addslashes($title) . "',\n";
            $code .= "        'subtitle' => '" . addslashes($subtitle) . "',\n";
            $code .= "        'type' => '{$heroType}',\n";
            if ($background) {
                $code .= "        'background' => '" . addslashes($background) . "',\n";
            }
            $code .= "        'height' => '400px'\n";
            $code .= "    ]);\n";
            break;
            
        case 'list':
            $items = isset($data['items']) ? $data['items'] : "Item 1\nItem 2\nItem 3";
            $listType = isset($data['type']) ? $data['type'] : 'ul';
            $itemsArray = array_filter(explode("\n", $items));
            $code .= "    echo block_list([\n";
            foreach ($itemsArray as $item) {
                $code .= "        '" . addslashes(trim($item)) . "',\n";
            }
            $code .= "    ], '{$listType}');\n";
            break;
            
        case 'accordion':
            $title = isset($data['title']) ? $data['title'] : 'Accordion Section';
            $content = isset($data['content']) ? $data['content'] : 'Accordion content';
            $code .= "    echo block_accordion([\n";
            $code .= "        [\n";
            $code .= "            'title' => '" . addslashes($title) . "',\n";
            $code .= "            'content' => '" . addslashes($content) . "'\n";
            $code .= "        ]\n";
            $code .= "    ]);\n";
            break;
            
        case 'form':
            $action = isset($data['action']) ? $data['action'] : '#';
            $method = isset($data['method']) ? $data['method'] : 'POST';
            $submitText = isset($data['submit_text']) ? $data['submit_text'] : 'Submit';
            $code .= "    echo block_form([\n";
            $code .= "        'action' => '" . addslashes($action) . "',\n";
            $code .= "        'method' => '{$method}',\n";
            $code .= "        'submit_text' => '" . addslashes($submitText) . "',\n";
            $code .= "        'fields' => [\n";
            $code .= "            ['type' => 'text', 'name' => 'name', 'label' => 'Name', 'required' => true]\n";
            $code .= "        ]\n";
            $code .= "    ]);\n";
            break;
            
        case 'media':
            $src = isset($data['src']) ? $data['src'] : 'https://placehold.co/600x400';
            $alt = isset($data['alt']) ? $data['alt'] : 'Image';
            $caption = isset($data['caption']) ? $data['caption'] : '';
            $code .= "    echo block_image(\n";
            $code .= "        '" . addslashes($src) . "',\n";
            $code .= "        '" . addslashes($alt) . "',\n";
            $code .= "        '" . addslashes($caption) . "'\n";
            $code .= "    );\n";
            break;
            
        default:
            // Generic fallback
            $code .= "    // Block type '{$type}' - add implementation\n";
            $code .= "    echo '<div class=\"block-{$type}\">Block: {$type}</div>';\n";
    }
    
    $code .= "    ?>\n\n";
    
    return $code;
}

/**
 * Sanitize page name
 */
function sanitizePageName($name) {
    // Only allow lowercase letters, numbers, and hyphens
    $name = strtolower(trim($name));
    $name = preg_replace('/[^a-z0-9-]/', '', $name);
    
    // Prevent directory traversal
    if (strpos($name, '..') !== false || strpos($name, '/') !== false) {
        return false;
    }
    
    return $name;
}

/**
 * Send success response
 */
function sendSuccess($data = []) {
    echo json_encode(array_merge(['success' => true], $data));
    exit;
}

/**
 * Send error response
 */
function sendError($message) {
    echo json_encode([
        'success' => false,
        'error' => $message
    ]);
    exit;
}
